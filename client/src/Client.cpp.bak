#include <pthread.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

#include <iostream>

#include "Utility.h"

using namespace SimToChat;

#define SERVER_PORT     8010
#define SERVER_IP       "127.0.0.1"

#define BUF_SIZE        1024

void* ReadProcess(void* arg)
{
    int client = *(int*)arg;

    char buf[BUF_SIZE] = {0};

    while (1)
    {
        bzero(buf, BUF_SIZE);
        int ret = recv(client, buf, BUF_SIZE, 0);
        if (ret <= 0)
        {
            std::cout << "已与服务器断开连接" << std::endl;
            exit(0);
        }
        std::cout << "来自其他客户端的消息：" << buf << std::endl;
    }

    return nullptr;
}

int main()
{
    int client;
    struct sockaddr_in addr_server;

    memset(&addr_server, 0, sizeof(addr_server));
    addr_server.sin_family = AF_INET;
    addr_server.sin_port = htons(SERVER_PORT);
    addr_server.sin_addr.s_addr = inet_addr(SERVER_IP);

    try
    {
        client = ssocket(AF_INET, SOCK_STREAM, 0);
        sconnect(client, (struct sockaddr*)&addr_server, sizeof(addr_server));

        pthread_t pid;

        int ret = pthread_create(&pid, nullptr, ReadProcess, (void*)&client);

        char buf[BUF_SIZE] = {0};
        while (1)
        {
            bzero(buf, BUF_SIZE);
            std::cin >> buf;
            if (strcmp(buf, "quit") == 0) break;

            ret = send(client, buf, BUF_SIZE, 0);
            if (ret == 0)
            {
                std::cout << "已与服务器断开连接" << std::endl;
                break;
            }
        }
        
    }
    catch(const std::exception& e)
    {
        perror(e.what());
        exit(1);
    }
    
    close(client);

    return 0;
}